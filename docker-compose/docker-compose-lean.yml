#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: '3'

volumes:
  redpanda-0: null
  redpanda-1: null
  redpanda-2: null

services:

  ###############################################################
  #    StateFun runtime
  ###############################################################

  statefun:
    # image: apache/flink-statefun
    #image: apache/flink-statefun-playground:3.2.0
    build:
        context: ./../../statefun-playground-entrypoint
    ports:
      - "8081:8081"
      - "8000:8000"
    volumes:
      - ./../../module.yaml:/module.yaml
    environment:
      - FLINK_CONF_DIR=./
        #    deploy:
        # resources:
        #reservations:
        #  memory: 20G
    depends_on:
      - redpanda-2
      - redpanda-1
      - apigateway
          #  - ROLE=master
    #  - MASTER_HOST=localhost
    #  - DYNAMIC_PARAMETERS=-Xmx2048m
    #  - FLINK_CONF_DIR=./

  ###############################################################
  #    Kafka for ingress and egress
  ###############################################################

  redpanda-0:
    hostname: redpanda-0
    command:
      - redpanda
      - start
      # Automatically create topics
      - --set redpanda.auto_create_topics_enabled=true
      - --kafka-addr
      - internal://0.0.0.0:9092,external://0.0.0.0:19092
      # use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      #
      # use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      #
      # address the broker advertises to clients that connect to the Kafka API.
      - --advertise-kafka-addr
      - internal://redpanda-0:9092,external://redpanda-0:9092
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:18082
      # address the broker advertises to clients that connect to PandaProxy.
      - --advertise-pandaproxy-addr
      - internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr
      - redpanda-0:8081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr
      - redpanda-0:33145
      - --advertise-rpc-addr
      - redpanda-0:33145
      # tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # the amount of memory to make available to Redpanda.
      - --memory 4G
      # the amount of memory that's left for the Seastar subsystem.
      # For development purposes this is set to 0.
      - --reserve-memory 256M
      # Redpanda won't assume it has all of the provisioned CPU
      # (to accommodate Docker resource limitations).
      - --overprovisioned
      # enable logs for debugging.
      - --default-log-level=error
    image: docker.redpanda.com/vectorized/redpanda:v22.3.11
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    ports:
      - "18081:8081"
      - "18082:8082"
      - "19092:19092"
      - "9092:9092"
      - "19644:9644"
  redpanda-1:
    hostname: redpanda-1
    command:
      - redpanda
      - start
      - --kafka-addr
      - internal://0.0.0.0:9093,external://0.0.0.0:19093
      - --advertise-kafka-addr
      - internal://redpanda-1:9093,external://redpanda-1:9093
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:28082
      - --advertise-pandaproxy-addr
      - internal://redpanda-1:8082,external://localhost:28082
      - --schema-registry-addr
      - redpanda-1:8081
      - --rpc-addr
      - redpanda-1:33145
      - --advertise-rpc-addr
      - redpanda-1:33145
      - --smp 1
      - --memory 4G
      - --reserve-memory 0M
      - --overprovisioned
      - --default-log-level=error
      - --seeds redpanda-0:33145
    image: docker.redpanda.com/vectorized/redpanda:v22.3.11
    container_name: redpanda-1
    volumes:
      - redpanda-1:/var/lib/redpanda/data
    ports:
      - "28081:8081"
      - "28082:8082"
      - "9093:9093"
      - "29092:29092"
      - "29644:9644"
    depends_on:
      - redpanda-0
  redpanda-2:
    hostname: redpanda-2
    command:
      - redpanda
      - start
      - --kafka-addr
      - internal://0.0.0.0:9094,external://0.0.0.0:19094
      - --advertise-kafka-addr
      - internal://redpanda-2:9094,external://redpanda-2:9094
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:38082
      - --advertise-pandaproxy-addr
      - internal://redpanda-2:8082,external://localhost:38082
      - --schema-registry-addr
      - redpanda-2:8081
      - --rpc-addr
      - redpanda-2:33145
      - --advertise-rpc-addr
      - redpanda-2:33145
      - --smp 1
      - --memory 4G
      - --reserve-memory 0M
      - --overprovisioned
      - --default-log-level=error
      - --seeds redpanda-0:33145
    image: docker.redpanda.com/vectorized/redpanda:v22.3.11
    container_name: redpanda-2
    volumes:
      - redpanda-2:/var/lib/redpanda/data
    ports:
      - "38081:8081"
      - "38082:8082"
      - "9094:9094"
      - "39092:39092"
      - "39644:9644"
    depends_on:
      - redpanda-0
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/vectorized/console:v2.1.1
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment: 
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - "8080:8080"
    depends_on:
      - redpanda-0

  db:
    image: apache/couchdb:2.3
    ports:
      - "5984:5984"
    environment:
      COUCHDB_USER: whisk_admin
      COUCHDB_PASSWORD: some_passw0rd
    volumes:
      - $(TMP_HOME)/tmp/openwhisk/couchdb:/usr/local/var/lib/couchdb:rw

  # WHISK CONTROLLER
  controller:
    image: ${DOCKER_IMAGE_PREFIX:-openwhisk}/controller:${DOCKER_IMAGE_TAG:-latest}
    command: /bin/sh -c "exec /init.sh 0 >> /logs/controller-local_logs.log 2>&1"
    privileged: true
    pid: "host"
    userns_mode: "host"
    links:
      - db:db.docker
    depends_on:
      - db
    env_file:
      - ./docker-whisk-controller.env   # env vars shared
      - ${HOME}/tmp/openwhisk/local.env       # generated during make setup
    environment:
      COMPONENT_NAME: controller
      PORT: 8888

      CONFIG_whisk_couchdb_provider: CouchDB
      CONFIG_whisk_couchdb_protocol: http
      CONFIG_whisk_couchdb_port: 5984
      CONFIG_whisk_couchdb_host: db.docker
      CONFIG_whisk_couchdb_username: whisk_admin
      CONFIG_whisk_couchdb_password: some_passw0rd
      CONFIG_akka_actor_provider: local

      LOADBALANCER_HOST: ${DOCKER_COMPOSE_HOST}
      LOADBALANCER_HOST_PORT: 443
      #invoker env
      EDGE_HOST: ${DOCKER_COMPOSE_HOST}
      EDGE_HOST_APIPORT: 443
      CONFIG_whisk_containerFactory_containerArgs_network: openwhisk_default
      WHISK_API_HOST_NAME: ${DOCKER_COMPOSE_HOST}

      #required by lean controller
      CONFIG_whisk_spi_MessagingProvider: org.apache.openwhisk.connector.lean.LeanMessagingProvider
      CONFIG_whisk_spi_LoadBalancerProvider: org.apache.openwhisk.core.loadBalancer.LeanBalancer
    volumes:
      - $(TMP_HOME)/tmp/openwhisk/controller/logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/containers
      - /sys/fs/cgroup:/sys/fs/cgroup
    ports:
      - "8888:8888"
      - "9222:9222"

  # The API Gateway is currently used to expose the Controller API
  #   see apigateway/conf/whisk-docker-compose.conf
  # Minio is used to mock an object storage ( i.e. S3) that hosts the api-gateway configuration.
  # Minio also exposes a web UI to browse the files: http://localhost:9001/minio/api-gateway/
  minio:
    image: minio/minio:RELEASE.2018-07-13T00-09-07Z
    command:
      - server
      - /data
    environment:
      - MINIO_ACCESS_KEY=5VCTEQOQ0GR0NV1T67GN
      - MINIO_SECRET_KEY=8MBK5aJTR330V1sohz4n1i7W5Wv/jzahARNHUzi3
    volumes:
      - $(TMP_HOME)/tmp/openwhisk/minio:/data:rw
    ports:
      - "9001:9000"
  redis:
    image: redis:2.8
    ports:
      - "6379:6379"
  apigateway:
    image: openwhisk/apigateway:nightly
    links:
      - controller:whisk.controller
      - redis:redis.docker
      - minio:minio.docker
    environment:
      - REDIS_HOST=${DOCKER_COMPOSE_HOST}
      - REDIS_PORT=6379
      - PUBLIC_MANAGEDURL_PORT=9090
      - PUBLIC_MANAGEDURL_HOST=${DOCKER_COMPOSE_HOST}
      - REMOTE_CONFIG=minio:api-gateway
    depends_on:
      - controller
      - redis
      - minio
    volumes:
      - $(TMP_HOME)/tmp/openwhisk/api-gateway-ssl:/etc/ssl:ro
      - $(TMP_HOME)/tmp/openwhisk/api-gateway-config/api-gateway/generated-conf.d:/etc/api-gateway/generated-conf.d
      - $(TMP_HOME)/tmp/openwhisk/rclone:/root/.config/rclone:rw
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
      - "9090:8080"
